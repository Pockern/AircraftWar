@startuml
'https://plantuml.com/class-diagram

Game ..> PropsFactory
Game ..> AbstractProps

PropsFactory .left.> AbstractProps

BloodFactory  ..> BloodProps
BombFactory   ..> BombProps
BulletFactory ..> BulletProps

class Game {

}

interface PropsFactory {
    + createProps(int locationX, int locationY, int speedX, int speedY, int hp): List<AbstractProps>
}

class BloodFactory implements PropsFactory {
    - props: List<AbstractProps>
    + BloodFactory()
    + createProps(int locationX, int locationY, int speedX, int speedY, int hp): List<AbstractProps>
}

class BombFactory implements PropsFactory {
    - props: List<AbstractProps>
    + BombFactory()
    + createProps(int locationX, int locationY, int speedX, int speedY, int hp): List<AbstractProps>
}

class BulletFactory implements PropsFactory {
    - props: List<AbstractProps>
    + BulletFactory()
    + createProps(int locationX, int locationY, int speedX, int speedY, int hp): List<AbstractProps>
}

abstract class AbstractProps {

    + AbstractProps(int locationX, int locationY, int speedX, int speedY)
    + forward(): void
}

class BloodProps extends AbstractProps {
    -treatment: int

    + HpProps(int locationX, int locationY, int speedX, int speedY)
    + getTreatment(): int
}

class BombProps extends AbstractProps {

    + BombProps(int locationX, int locationY, int speedX, int speedY)
}

class BulletProps extends AbstractProps {

    + FireProps(int locationX, int locationY, int speedX, int speedY)
}

@enduml